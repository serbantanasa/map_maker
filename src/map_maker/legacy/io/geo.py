"""Portions generated by AI with human review.

Geospatial export helpers for rasters and vector data.
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Iterable, Mapping, Sequence

import numpy as np
import pyarrow as pa
import pyarrow.parquet as pq
import rasterio
from rasterio.enums import Resampling
from rasterio.transform import Affine
from shapely.geometry import LineString, Polygon


def world_transform(width: int, height: int) -> Affine:
    """Affine transform mapping pixel centers to lon/lat."""
    dx = 360.0 / float(width)
    dy = 180.0 / float(height)
    return Affine.translation(-180.0, 90.0) * Affine.scale(dx, -dy)


def write_geotiff(
    path: str | Path,
    arr: np.ndarray,
    transform: Affine,
    *,
    crs: str = "EPSG:4326",
) -> None:
    """Write a single-band GeoTIFF with tiled compression and overviews."""
    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)
    dtype = arr.dtype
    with rasterio.open(
        path,
        "w",
        driver="GTiff",
        height=arr.shape[0],
        width=arr.shape[1],
        count=1,
        dtype=str(dtype),
        crs=crs,
        transform=transform,
        tiled=True,
        blockxsize=256,
        blockysize=256,
        compress="DEFLATE",
        predictor=2 if np.issubdtype(dtype, np.floating) else 1,
        num_threads="ALL_CPUS",
    ) as dst:
        dst.write(arr, 1)
        dst.build_overviews([2, 4, 8, 16], Resampling.average)
        dst.update_tags(ns="rio_overview", resampling="average")


def write_parquet_wkb(
    path: str | Path,
    geoms: Iterable[LineString | Polygon],
    properties: Mapping[str, Sequence] | None = None,
    *,
    crs: str = "EPSG:4326",
    geom_col: str = "geometry",
) -> None:
    """Write a minimal Parquet file with a WKB geometry column."""
    path = Path(path)
    path.parent.mkdir(parents=True, exist_ok=True)
    wkb_col = [geom.wkb if geom is not None else None for geom in geoms]
    arrays: dict[str, pa.Array] = {geom_col: pa.array(wkb_col, type=pa.binary())}
    if properties:
        for key, values in properties.items():
            arrays[key] = pa.array(values)
    table = pa.table(arrays)
    metadata = json.dumps(
        {"columns": {geom_col: {"crs": crs, "encoding": "WKB"}}}
    ).encode("utf-8")
    table = table.replace_schema_metadata({b"geo": metadata})
    pq.write_table(table, path, compression="zstd", version="2.6")
