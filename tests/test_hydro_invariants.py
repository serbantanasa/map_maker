"""Portions generated by AI with human review.

Hydrology-focused regression tests."""

from __future__ import annotations

import numpy as np

from map_maker.generate import D8_DX, D8_DY, generate_world


def test_rivers_do_not_cross_ocean_or_ice() -> None:
    world = generate_world(128, 96, 123, {})
    elev = world["elev"]
    temp = world["temp"]
    ocean = elev < world["params"]["ocean_level"]
    ice = temp <= world["params"]["ice_temp_threshold"]
    rivers = world["rivers_mask"].astype(bool)
    assert not np.any(rivers & ocean)
    assert not np.any(rivers & ice)


def test_river_segments_present() -> None:
    world = generate_world(128, 128, 222, {})
    stats = world["stats"]
    assert stats["num_rivers"] > 0
    assert stats["num_river_cells"] > 0
    lakes = world["lake_id"] > 0
    assert not np.any(world["rivers_mask"].astype(bool) & lakes)


def test_majority_river_cells_drain_to_ocean() -> None:
    world = generate_world(128, 128, 222, {})
    flow_dir = world["flow_dir"]
    rivers = world["rivers_mask"].astype(bool)
    ocean = world["elev"] < world["params"]["ocean_level"]

    h, w = flow_dir.shape

    def drains(y: int, x: int) -> bool:
        seen = set()
        cy, cx = y, x
        while True:
            if (cy, cx) in seen:
                return False
            seen.add((cy, cx))
            if ocean[cy, cx]:
                return True
            dir_idx = int(flow_dir[cy, cx])
            if dir_idx < 0:
                return False
            cy += int(D8_DY[dir_idx])
            cx += int(D8_DX[dir_idx])
            if not (0 <= cy < h and 0 <= cx < w):
                return False

    total = int(rivers.sum())
    draining = sum(
        drains(int(y), int(x))
        for y, x in zip(*np.where(rivers), strict=False)
    )
    assert total > 0
    assert draining / total >= 0.5
